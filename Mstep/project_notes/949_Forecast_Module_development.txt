# In addition to 665 Azet notes, and notes about
  configuration and troubleshooting of 949 DEV machine,
  we record also our detail notes for developemnt.
  - 949_Azet_for_Belehrad_notes.txt 
  - 949_configuration_of_dev_machine_10.111.5.171.txt

# CurrrentDataReaderAgent
We extended design to hold any data and made 'S' and 'M' configurable
in whole agent.
We created shared variable for holding the configured stations,
and using java reflection we store for each data type,
just identifiers in the hashmap.
Add there yet exclusion of "" - empty stationIdent.
In the initializaiton step - Done.


Do not foget to:
1. For failover processing to order the input CSV files by data
   in reverse, the newest should be processed last. - Done

2. Conduct stand-alone performance test - over weekend.
   By the configuration let running just the CurrentDataReaderAgent
   and check the memory usage.
   ---
   22.10.2021 - launched performance test
   Only CurrentDataReaderAgent will be running.
   Launched the memory and perfomance test at 14:16 afternoon
   screen Ctrl-a d - detach
   Connect:
   > screen -r
   
   Current memory usage - Friday 22.10.2021:
   Right after IMS4 start:
    PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
   15546 root      20   0 9164280   1.2g  25332 S 195.9  7.7  15:05.55 java
   15546 root      20   0 9164280   1.2g  25332 S 192.3  7.7  15:24.82 java
   15546 root      20   0 9164280   1.2g  25332 S 186.4  7.7  15:43.50 java
   15546 root      20   0 9164280   1.2g  25332 S 185.9  7.7  16:02.11 java
   15546 root      20   0 9164280   1.2g  25336 S 190.7  7.7  16:21.22 java
   15546 root      20   0 9164280   1.2g  25336 S 194.2  7.7  16:40.70 java
   15546 root      20   0 9164280   1.2g  25336 S 189.2  7.7  16:59.68 java
   15546 root      20   0 9164280   1.2g  25336 S 185.5  7.7  17:18.27 java

   Latter at 15:38:
   15546 root      20   0 9165452   1.3g  25432 S 189.6  8.1 166:36.02 java
   15546 root      20   0 9165452   1.3g  25432 S 191.1  8.1 166:55.17 java
   15546 root      20   0 9165452   1.3g  25432 S 189.8  8.1 167:14.17 java
   15546 root      20   0 9165452   1.3g  25432 S 191.4  8.1 167:33.35 java
   15546 root      20   0 9165452   1.3g  25432 S 177.9  8.1 167:51.18 java
   15546 root      20   0 9165452   1.3g  25432 S 185.4  8.1 168:09.78 java
   15546 root      20   0 9165452   1.3g  25432 S 183.1  8.1 168:28.13 java
   15546 root      20   0 9165452   1.3g  25432 S 172.7  8.1 168:45.43 java
   15546 root      20   0 9165452   1.3g  25432 S 190.5  8.1 169:04.52 java
   15546 root      20   0 9165452   1.3g  25432 S 185.8  8.1 169:23.14 java
   15546 root      20   0 9165452   1.3g  25432 S 186.1  8.1 169:41.77 java
   15546 root      20   0 9165452   1.3g  25432 S 163.8  8.1 169:58.18 java
   15546 root      20   0 9165452   1.3g  25432 S 171.7  8.1 170:15.37 java
   15546 root      20   0 9165452   1.3g  25432 S 183.6  8.1 170:33.77 java
   .. when turnning off on Friday
   15546 root      20   0 9165584   1.3g  25460 S 180.3  8.3 307:48.21 java
   15546 root      20   0 9165584   1.3g  25460 S 190.9  8.3 308:07.36 java
   ... on 25.10.2021 Monday morning at 9:21
   15546 root      20   0 9169604   1.3g  16744 S 196.7  8.7   7609:51 java
   15546 root      20   0 9169604   1.3g  16744 S 191.8  8.7   7610:07 java
   15546 root      20   0 9169604   1.3g  16744 S 193.7  8.7   7610:15 java
   
   
3. Conduct peformance test - turn off processing for 4 hours, let
   accumulate the CSV files and then run the test. - In progress for 3 days of SYNOP
   (does not look promissing - about 700 000 files have blocked the agent
    for long time, I would add there protection parameter to listing of files.
    Just last 4-5 hours of data read if the input folder is full.)

    22.10.2021 - second test with ~100 000 METAR messages (corresponding to last 16 hours)
    After implemented expiration and with log level 3, not detail as before.
    Other data ingestion goes as before.
    2021-10-22 12:01:06.962 UTC: DEBUG (3) NOTE: Finished in 647128ms
    2021-10-22 12:01:06.962 UTC: NOTE: Read 102427 files.
    2021-10-22 12:01:06.962 UTC: NOTE: Deleting read CSV files.
    2021-10-22 12:01:06.963 UTC: DEBUG (3) NOTE: Removing processed CSV files
    2021-10-22 12:01:20.287 UTC: DEBUG (3) NOTE: Removing finished.
    2021-10-22 12:01:20.288 UTC: DEBUG (3) NOTE: Starting expiration of outdated data.
    2021-10-22 12:01:20.288 UTC: DEBUG (3) NOTE: Expiration reference time for source S: 1634904080288, adjustedReferenceTime: 1634899880288
    2021-10-22 12:01:20.288 UTC: DEBUG (3) NOTE: Expiration reference time for source M: 1634904080288, adjustedReferenceTime: 1634899880288
    2021-10-22 12:01:20.294 UTC: DEBUG (3) NOTE: Expiration reference time for source C: 1634904080288, adjustedReferenceTime: 1634899880288
    2021-10-22 12:01:20.299 UTC: DEBUG (3) NOTE: Expiraiton took: 11 [ms]
    2021-10-22 12:01:20.300 UTC: DEBUG (3) NOTE: Starting deleting processed files.
    2021-10-22 12:01:20.300 UTC: NOTE: Status of current data reading:
    2021-10-22 12:01:20.300 UTC: NOTE: Source: S, configured stations: 105, present: 0, missing: 105
    2021-10-22 12:01:20.301 UTC: NOTE: Source: M, configured stations: 36, present: 25, missing: 11
    2021-10-22 12:01:20.301 UTC: NOTE: Source: C, configured stations: 105, present: 0, missing: 105
    2021-10-22 12:01:20.302 UTC: NOTE: Configured stations: 246, accumalted present of all sources: 25
    2021-10-22 12:01:20.302 UTC: NOTE: Successfuly finished.

    647128 [ms] corresponds to ~11 minutes.

4. Missing yet pressure logging in the detail log. - Done
   Erroneous - needs amendement.
   
5. Expiration will be tricky - we shall use TimeTree
   for selection and then checking whether it is empty and remove the record.
   No, we will just loop over keys - this will be most performant,
   we just compare int which is fast enough.
   - In progress, to be tested.
   
Only then we can think of successful memory and performance test.

Detail logging showed that various sources have various pressure:
SYNOP - has variables 46
METAR - has variables for pressure: 44, 45
We should make more robuste detail logging during status report function.
Now it is failing.

Level 3 logging:
2021-10-22 11:23:53.253 UTC: NOTE: -----------------------------------------
2021-10-22 11:23:53.327 UTC: NOTE: CurrentDataReaderAgent init
2021-10-22 11:23:53.340 UTC: NOTE: Configuraiton
2021-10-22 11:23:53.353 UTC: NOTE: enabled: true
2021-10-22 11:23:53.373 UTC: NOTE: period: 30000
2021-10-22 11:23:53.373 UTC: NOTE: deleteInputFiles: true
2021-10-22 11:23:53.374 UTC: NOTE: logLevel: 3
2021-10-22 11:23:53.374 UTC: NOTE: path: ../../ims/data/CurrentDataCsv/
2021-10-22 11:23:53.374 UTC: NOTE: variables:
2021-10-22 11:23:53.375 UTC: NOTE: 78:Temp.Dry
2021-10-22 11:23:53.375 UTC: NOTE: 77:Temp.DewPoint
2021-10-22 11:23:53.375 UTC: NOTE: 83:Temp.Ground
2021-10-22 11:23:53.375 UTC: NOTE: 82:Temp.Dry.Min.Dly
2021-10-22 11:23:53.375 UTC: NOTE: 80:Temp.Dry.Max.Dly
2021-10-22 11:23:53.375 UTC: NOTE: 81:Temp.Dry.Min.60min
2021-10-22 11:23:53.375 UTC: NOTE: 79:Temp.Dry.Max.60min
2021-10-22 11:23:53.375 UTC: NOTE: 50:RelHumidity
2021-10-22 11:23:53.375 UTC: NOTE: 116:Wind.Speed
2021-10-22 11:23:53.375 UTC: NOTE: 110:Wind.Dir
2021-10-22 11:23:53.376 UTC: NOTE: 46:Press.Station
2021-10-22 11:23:53.376 UTC: NOTE: 21:Clouds.Amount
2021-10-22 11:23:53.376 UTC: NOTE: 31:Prec
2021-10-22 11:23:53.376 UTC: NOTE: 91:Weather
2021-10-22 11:23:53.376 UTC: NOTE: 30:Metar.CAVOK
2021-10-22 11:23:53.376 UTC: NOTE: 118:Weather.Metar.1
2021-10-22 11:23:53.376 UTC: NOTE: 119:Weather.Metar.2
2021-10-22 11:23:53.377 UTC: NOTE: 120:Weather.Metar.3
2021-10-22 11:23:53.377 UTC: NOTE: 92:Weather.Auto
2021-10-22 11:23:53.377 UTC: NOTE: 93:Weather.Ind
2021-10-22 11:23:53.377 UTC: NOTE: 2:Clouds.1.Amount.Metar
2021-10-22 11:23:53.377 UTC: NOTE: 7:Clouds.2.Amount.Metar
2021-10-22 11:23:53.377 UTC: NOTE: 12:Clouds.3.Amount.Metar
2021-10-22 11:23:53.377 UTC: NOTE: 17:Clouds.4.Amount.Metar
2021-10-22 11:23:53.377 UTC: NOTE: 44:Press.QFF
2021-10-22 11:23:53.377 UTC: NOTE: 45:Press.QNH
2021-10-22 11:23:53.377 UTC: NOTE: 89:Visibility
2021-10-22 11:23:53.377 UTC: NOTE: sources:
2021-10-22 11:23:53.378 UTC: NOTE: Letter: S, StationIdName: WMOIndex, CSVSuffixPattern: (.*)(\_(S)\.csv) ExpirationMinutes: 70
2021-10-22 11:23:53.378 UTC: NOTE: Letter: M, StationIdName: CCCC, CSVSuffixPattern: (.*)(\_(M)\.csv) ExpirationMinutes: 70
2021-10-22 11:23:53.378 UTC: NOTE: Letter: C, StationIdName: WMOIndex, CSVSuffixPattern: (.*)(\_(C)\.csv) ExpirationMinutes: 70
2021-10-22 11:23:53.378 UTC: NOTE: worldLocalLocationsPath: ../../ims/cfg/station/forecast/WorldLocalLocations.xml
2021-10-22 11:23:53.378 UTC: NOTE: localLocationsPath: ../../ims/cfg/station/forecast/WRF_LocalLocations.xml
2021-10-22 11:23:53.387 UTC: DEBUG (3) NOTE: Found field: public java.lang.String com.microstepmis.forecast.customization.InputStation.WMOIndex
2021-10-22 11:23:53.387 UTC: DEBUG (3) NOTE: Found field: public java.lang.String com.microstepmis.forecast.customization.InputStation.CCCC
2021-10-22 11:23:53.388 UTC: DEBUG (3) NOTE: Found field: public java.lang.String com.microstepmis.forecast.customization.InputStation.WMOIndex
2021-10-22 11:23:53.730 UTC: DEBUG (3) NOTE: Filling into allConfiguredStations stations for source S from: ../../ims/cfg/station/forecast/WorldLocalLocations.xml
2021-10-22 11:23:54.105 UTC: DEBUG (3) NOTE: Filling into allConfiguredStations stations for source S from: ../../ims/cfg/station/forecast/WRF_LocalLocations.xml
2021-10-22 11:23:54.260 UTC: DEBUG (3) NOTE: Number of records for source S is 105
2021-10-22 11:23:54.260 UTC: DEBUG (3) NOTE: Filling into allConfiguredStations stations for source M from: ../../ims/cfg/station/forecast/WorldLocalLocations.xml
2021-10-22 11:23:54.272 UTC: DEBUG (3) NOTE: Filling into allConfiguredStations stations for source M from: ../../ims/cfg/station/forecast/WRF_LocalLocations.xml
2021-10-22 11:23:54.278 UTC: DEBUG (3) NOTE: Number of records for source M is 36
2021-10-22 11:23:54.278 UTC: DEBUG (3) NOTE: Filling into allConfiguredStations stations for source C from: ../../ims/cfg/station/forecast/WorldLocalLocations.xml
2021-10-22 11:23:54.294 UTC: DEBUG (3) NOTE: Filling into allConfiguredStations stations for source C from: ../../ims/cfg/station/forecast/WRF_LocalLocations.xml
2021-10-22 11:23:54.301 UTC: DEBUG (3) NOTE: Number of records for source C is 105
2021-10-22 00:00:36.688 UTC: NOTE: Commence reading of current data in CSV files.
2021-10-22 00:00:36.707 UTC: DEBUG (3) NOTE: Finished in 4ms
2021-10-22 00:00:36.707 UTC: NOTE: Read 77 files.
2021-10-22 00:00:36.707 UTC: NOTE: Deleting read CSV files.
2021-10-22 00:00:36.707 UTC: DEBUG (3) NOTE: Removing processed CSV files
2021-10-22 00:00:36.708 UTC: DEBUG (3) NOTE: Removing finished.
2021-10-22 00:00:36.708 UTC: DEBUG (3) NOTE: Starting expiration of outdated data.
2021-10-22 00:00:36.708 UTC: DEBUG (3) NOTE: Expiration reference time for source S: 1634860836708, adjustedReferenceTime: 1634856636708
2021-10-22 00:00:36.708 UTC: DEBUG (3) NOTE: Expiration reference time for source M: 1634860836708, adjustedReferenceTime: 1634856636708
2021-10-22 00:00:36.709 UTC: DEBUG (3) NOTE: Expiration reference time for source C: 1634860836708, adjustedReferenceTime: 1634856636708
2021-10-22 00:00:36.709 UTC: DEBUG (3) NOTE: Expiraiton took: 1 [ms]
2021-10-22 00:00:36.709 UTC: DEBUG (3) NOTE: Starting deleting processed files.
2021-10-22 00:00:36.709 UTC: NOTE: Status of current data reading:
2021-10-22 00:00:36.709 UTC: NOTE: Source: S, configured stations: 105, present: 35, missing: 70
2021-10-22 00:00:36.709 UTC: NOTE: Source: M, configured stations: 36, present: 25, missing: 11
2021-10-22 00:00:36.709 UTC: NOTE: Source: C, configured stations: 105, present: 5, missing: 100
2021-10-22 00:00:36.713 UTC: NOTE: Configured stations: 246, accumalted present of all sources: 65
2021-10-22 00:00:36.717 UTC: NOTE: Successfuly finished.

Level 5 logging:
2021-10-22 11:24:23.418 UTC: NOTE: Commence reading of current data in CSV files.
2021-10-22 11:24:23.478 UTC: DEBUG (5) NOTE: Reading file: 202110212329_28_532_C.csv
2021-10-22 11:24:23.478 UTC: DEBUG (5) NOTE: CurrentData has map: true, 00003, 78, 1634857200000, -29.0
2021-10-22 11:24:23.504 UTC: DEBUG (5) NOTE: CurrentData has map: true, 00003, 77, 1634857200000, -28.1
2021-10-22 11:24:23.504 UTC: DEBUG (5) NOTE: CurrentData has map: true, 00003, 50, 1634857200000, 109.0
2021-10-22 11:24:23.504 UTC: DEBUG (5) NOTE: CurrentData has map: true, 00003, 116, 1634857200000, 4.0
2021-10-22 11:24:23.504 UTC: DEBUG (5) NOTE: CurrentData has map: true, 00003, 110, 1634857200000, 250.0
2021-10-22 11:24:23.504 UTC: DEBUG (5) NOTE: CurrentData has map: true, 00003, 46, 1634857200000, 986.1
2021-10-22 11:24:23.504 UTC: DEBUG (5) NOTE: CurrentData has map: true, 00003, 21, 1634857200000, 0
2021-10-22 11:24:23.504 UTC: DEBUG (5) NOTE: CurrentData has map: true, 00003, 93, 1634857200000, 2
2021-10-22 11:24:23.504 UTC: DEBUG (5) NOTE: CurrentData has map: true, 00003, 44, 1634857200000, 988.7
2021-10-22 11:24:23.504 UTC: DEBUG (5) NOTE: CurrentData has map: true, 00003, 89, 1634857200000, 20000.0
...
2021-10-22 11:24:23.967 UTC: DEBUG (3) NOTE: Finished in 490ms
2021-10-22 11:24:23.967 UTC: NOTE: Read 148 files.
2021-10-22 11:24:23.967 UTC: NOTE: Deleting read CSV files.
2021-10-22 11:24:23.967 UTC: DEBUG (3) NOTE: Removing processed CSV files
2021-10-22 11:24:23.970 UTC: DEBUG (3) NOTE: Removing finished.
2021-10-22 11:24:23.971 UTC: DEBUG (3) NOTE: Starting expiration of outdated data.
2021-10-22 11:24:23.971 UTC: DEBUG (3) NOTE: Expiration reference time for source S: 1634901863971, adjustedReferenceTime: 1634897663971
2021-10-22 11:24:23.971 UTC: DEBUG (3) NOTE: Expiration reference time for source M: 1634901863971, adjustedReferenceTime: 1634897663971
2021-10-22 11:24:23.971 UTC: DEBUG (3) NOTE: Expiration reference time for source C: 1634901863971, adjustedReferenceTime: 1634897663971
2021-10-22 11:24:23.971 UTC: DEBUG (5) NOTE: 1634853600000 time coordinate removed
2021-10-22 11:24:23.971 UTC: DEBUG (5) NOTE: 1634878800000 time coordinate removed
2021-10-22 11:24:23.971 UTC: DEBUG (5) NOTE: 1634868000000 time coordinate removed
2021-10-22 11:24:23.971 UTC: DEBUG (5) NOTE: 1634842800000 time coordinate removed
...
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: 13583 missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: 13589 missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: 13586 missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: 15333 missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: 13588 missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: 15300 missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: 15421 missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: 15422 missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: 15120 missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: 15480 missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: 15450 missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: 15310 missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: 15090 missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: 15377 missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: 15282 missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: 15302 missing data.
...
2021-10-22 11:24:24.050 UTC: NOTE: Source: S, configured stations: 105, present: 0, missing: 105
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: LDRI missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: LDZD missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: LDDD missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: LDZA missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: LYVR missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: LHBP missing data.
2021-10-22 11:24:24.050 UTC: DEBUG (5) NOTE: LHBM missing data.
...
2021-10-22 11:24:24.050 UTC: NOTE: Source: M, configured stations: 36, present: 0, missing: 36
2021-10-22 11:24:24.051 UTC: DEBUG (5) NOTE: 15625 missing data.
2021-10-22 11:24:24.051 UTC: DEBUG (5) NOTE: 00001, 1634900400000, 2021-10-22 11:00:00.000, -22.0, 986.1, 988.7
2021-10-22 11:24:24.051 UTC: DEBUG (5) NOTE: 15626 missing data.
2021-10-22 11:24:24.051 UTC: DEBUG (5) NOTE: 00002, 1634900400000, 2021-10-22 11:00:00.000, -19.0, 986.1, 988.7
2021-10-22 11:24:24.051 UTC: DEBUG (5) NOTE: 15640 missing data.
2021-10-22 11:24:24.051 UTC: DEBUG (5) NOTE: 00003, 1634900400000, 2021-10-22 11:00:00.000, -22.0, 986.1, 988.7
2021-10-22 11:24:24.051 UTC: DEBUG (5) NOTE: 15614 missing data.
2021-10-22 11:24:24.051 UTC: DEBUG (5) NOTE: 00004, 1634900400000, 2021-10-22 11:00:00.000, -7.0, 986.1, 988.7
2021-10-22 11:24:24.051 UTC: DEBUG (5) NOTE: 15552 missing data.
2021-10-22 11:24:24.051 UTC: DEBUG (5) NOTE: 00005, 1634900400000, 2021-10-22 11:00:00.000, -22.0, 986.1, 988.7
2021-10-22 11:24:24.051 UTC: DEBUG (5) NOTE: 14472 missing data.
...
2021-10-22 11:24:54.728 UTC: NOTE: Source: C, configured stations: 105, present: 5, missing: 100
2021-10-22 11:24:54.728 UTC: NOTE: Configured stations: 246, accumalted present of all sources: 5
2021-10-22 11:24:54.728 UTC: NOTE: Successfuly finished.

# 3.12.2021 - after meeting with Kamil, Marcel, Lukas Ivica
we had terminated further work on ActualData agent re-implementation.
I have just fixed static function calls, and added some level of
detail log, these are two examples:

log level 3 - intended for standard operations
---
2021-12-02 13:20:22.025 UTC: NOTE: --- ActualDataAgent init ---
2021-12-02 13:20:27.442 UTC: NOTE: cfg.enabled: true
2021-12-02 13:20:27.490 UTC: NOTE: cfg.logLevel: 3
2021-12-02 13:20:27.535 UTC: NOTE: cfg.periodStartProcessActualize: 40000
2021-12-02 13:20:27.556 UTC: NOTE: proxyDataProcessedShorterPeriod - calling starProcess(): METEO/F/processedH
2021-12-02 13:20:27.600 UTC: NOTE: proxyTimer - calling starProcessHourActualise(): Thu Dec 02 13:00:00 UTC 2021, 40000
2021-12-02 13:20:27.642 UTC: NOTE: Launching Time Period Actualized - starProcessHourActualise()
2021-12-02 13:20:27.646 UTC: DEBUG (1) NOTE: Start process starProcessHourActualise
2021-12-02 13:20:27.666 UTC: DEBUG (1) NOTE: Control blocks from the space METEO/F/newRunProcess, METEO/F/weitingTimeForManualDataEndty, METEO/F/interpolatedDataProcess: false, null, false
2021-12-02 13:20:27.666 UTC: DEBUG (3) NOTE: processNewRun, manualDataProcess, actualiseHourlyData, firstRun: false, false, true, true
2021-12-02 13:20:27.666 UTC: DEBUG (3) NOTE: Actualize hourValues from the CurrentDataReaderAgent.
2021-12-02 13:20:27.666 UTC: DEBUG (3) NOTE: Call of actualiseDataFromSelect
2021-12-02 13:20:27.666 UTC: DEBUG (3) WARNING: Forectime GFS start is null - setting forecast start time to current hour.
2021-12-02 13:20:28.030 UTC: DEBUG (3) NOTE: hourValues map, stations: 0
2021-12-02 13:20:28.168 UTC: DEBUG (3) NOTE: actualDataValues map, stations: 0
2021-12-02 13:20:28.190 UTC: DEBUG (3) NOTE: Write to space METEO/F/actualisedTime, METEO/F/actualOutputData, METEO/F/startIRDataA: 1638450000000, 0, 1638451228190
2021-12-02 13:20:28.191 UTC: DEBUG (1) NOTE: End process starProcessHourActualise
2021-12-02 13:20:28.191 UTC: NOTE: ActualData agent successfully completed.
2021-12-02 13:21:02.213 UTC: NOTE: Launching Time Period Actualized - starProcessHourActualise()
2021-12-02 13:21:02.235 UTC: DEBUG (1) NOTE: Start process starProcessHourActualise
2021-12-02 13:21:02.252 UTC: DEBUG (1) NOTE: Control blocks from the space METEO/F/newRunProcess, METEO/F/weitingTimeForManualDataEndty, METEO/F/interpolatedDataProcess: false, null, false
2021-12-02 13:21:02.270 UTC: DEBUG (3) NOTE: processNewRun, manualDataProcess, actualiseHourlyData, firstRun: false, false, true, true
2021-12-02 13:21:02.288 UTC: DEBUG (3) NOTE: Actualize hourValues from the CurrentDataReaderAgent.
2021-12-02 13:21:02.299 UTC: DEBUG (3) NOTE: Call of actualiseDataFromSelect
2021-12-02 13:21:02.317 UTC: DEBUG (3) WARNING: Forectime GFS start is null - setting forecast start time to current hour.
2021-12-02 13:21:02.447 UTC: DEBUG (3) NOTE: hourValues map, stations: 0
....

log level 5 - detail log, plus additonal logging to ActualDataAgentStatic.log
---
2021-12-02 13:18:30.340 UTC: NOTE: cfg.enabled: true
2021-12-02 13:18:30.396 UTC: NOTE: cfg.logLevel: 5
2021-12-02 13:18:30.428 UTC: NOTE: cfg.periodStartProcessActualize: 40000
2021-12-02 13:18:30.444 UTC: NOTE: proxyDataProcessedShorterPeriod - calling starProcess(): METEO/F/processedH
2021-12-02 13:18:30.449 UTC: NOTE: proxyTimer - calling starProcessHourActualise(): Thu Dec 02 13:00:00 UTC 2021, 40000
2021-12-02 13:18:30.496 UTC: NOTE: Launching Time Period Actualized - starProcessHourActualise()
2021-12-02 13:18:30.545 UTC: DEBUG (1) NOTE: Start process starProcessHourActualise
2021-12-02 13:18:30.601 UTC: DEBUG (1) NOTE: Control blocks from the space METEO/F/newRunProcess, METEO/F/weitingTimeForManualDataEndty, METEO/F/interpolatedDataProcess: false, null, false
2021-12-02 13:18:30.612 UTC: DEBUG (3) NOTE: processNewRun, manualDataProcess, actualiseHourlyData, firstRun: false, false, true, true
2021-12-02 13:18:30.624 UTC: DEBUG (5) NOTE: actualiseHourlyData: true, processNewRun: false, manualDataProcess: null, interpolateProcess: false
2021-12-02 13:18:30.629 UTC: DEBUG (3) NOTE: Actualize hourValues from the CurrentDataReaderAgent.
2021-12-02 13:18:30.634 UTC: DEBUG (3) NOTE: Call of actualiseDataFromSelect
2021-12-02 13:18:30.680 UTC: DEBUG (5) NOTE: firstRunGfs: true, forectimeStart: null
2021-12-02 13:18:30.710 UTC: DEBUG (3) WARNING: Forectime GFS start is null - setting forecast start time to current hour.
2021-12-02 13:18:30.737 UTC: DEBUG (5) NOTE: variable Temp.Dry
2021-12-02 13:18:30.888 UTC: DEBUG (5) NOTE: Actual data not found-station 548 time 1638450000000 variable 78
2021-12-02 13:18:31.142 UTC: DEBUG (5) NOTE: variable Clouds.Amount
2021-12-02 13:18:31.157 UTC: DEBUG (5) NOTE: variable RelHumidity
2021-12-02 13:18:31.157 UTC: DEBUG (5) NOTE: Actual data not found-station 548 time 1638450000000 variable 50
2021-12-02 13:18:31.157 UTC: DEBUG (5) NOTE: variable Prec
2021-12-02 13:18:31.171 UTC: DEBUG (5) NOTE: variable Temp.DewPoint
2021-12-02 13:18:31.171 UTC: DEBUG (5) NOTE: Actual data not found-station 548 time 1638450000000 variable 77
2021-12-02 13:18:31.171 UTC: DEBUG (5) NOTE: variable Temp.Ground
2021-12-02 13:18:31.171 UTC: DEBUG (5) NOTE: variable Press.Station
...

It was reviewed and merged by Marcel and now we deploy it for Azet
using the upgrade script.

# December 2021 - established new configurations in all
Forecast Module agents.
Closed further work on complete redesign of ActualData agent.
Merged and stored to git for 949 Belgrade / verification towards Azet DEV machine
and complete verification of this installation is still pending.

# We start with WRF data ingestion and retrieval just WRF Meteograms.
After reconfiguration of MeteogramWRFAgent, the following error occured:
---
2021-12-22 08:38:33.077 UTC: DEBUG (2) NOTE: Load data from wrf: WRFPRS_d03.48
2021-12-22 08:38:33.077 UTC: DEBUG (5) NOTE: Loaded values of variable maximum_temperature_lvl_105 from GRIB
2021-12-22 08:38:33.077 UTC: DEBUG (5) NOTE: Loaded values of variable minimum_temperature_lvl_105 from GRIB
2021-12-22 08:38:33.077 UTC: DEBUG (5) NOTE: Loaded values of variable geopotential_height_500 from GRIB
2021-12-22 08:38:33.077 UTC: DEBUG (5) NOTE: Checking parameter temperature level 100 value1 500.000000 value2 0.000000
2021-12-22 08:38:33.077 UTC: DEBUG (5) NOTE: Find value
2021-12-22 08:38:33.078 UTC: DEBUG (5) NOTE: DestUnit not definet, value is in source unit: K
2021-12-22 08:38:33.078 UTC: DEBUG (5) NOTE: Converting from K to degC
2021-12-22 08:38:33.078 UTC: DEBUG (1) ERROR: Error: com.microstepmis.ims.data.grib.NotSupportedException: such functionality is not available for this kind of grib (not long-la
t)
2021-12-22 08:38:33.078 UTC: ERROR: starCreateMeteogram failed
2021-12-22 08:38:34.024 UTC: DEBUG (1) NOTE: Loading MeteogramUVIndexAgent configuration from ../cfg/station/forecast/MeteogramWRFAgentCfg.xml .
2021-12-22 08:38:34.024 UTC: NOTE:
2021-12-22 08:38:34.024 UTC: NOTE: --- MeteogramWRFAgent init ---
...
---
Investigation showed that Serbian WRF model grib1 files are missing metadata.
Could not be read by any software except 'wgrib'.

We have tested yet using direct output of Serbian WRF model, grib2 outputs.
But the library:
com.microstepmis.ims.data.grib.grib2
did not read any content when trying procedure in
com.microstepmis.ims.data.grib.grib2.Grib2Dump
nor when trying unit tests.
This copied Unidata version of Grib2 seems like obsolete already.

# 22.12.2021 - we try various open source tools to read grib2 WRF data.
Already successful with Panoply, and
NOAA Weather and Climate Toolkit

# Now we try this package:
# https://github.com/philippphb/GRIB2Tools

When running towards local test file, the tool using Java jdk1.8.0_172 succeeded:
java GRIB2FileTest.java res/ICON_GDS_europe_reg_0.250x0.250_T_2M_2017112312.grib2
---
Reading file res/ICON_GDS_europe_reg_0.250x0.250_T_2M_2017112312.grib2, file structure 0:
Date: 23.11.2017
Time: 12:00.00
Generating centre: 78
Forecast time: 0
Parameter category: 0
Parameter number: 0
Covered area:
   from (latitude, longitude): 5.0, 285.0
   to: (latitude, longitude): 80.0, 75.0
Value at (52.52, 13.38): 274.7773

But when trying to open Serbian WRF grib2 sample data, it fails:
---
Reading file c:\Projects\949_uprava_Azet-u_pre_Belehrad\dataSamples_Belehrad\Azet_Belehrad_comparision\WRF_Belehrad_sample\grib2_source\wrfout_d03_2021-12-23_12.grib, file structure 0:
This is not a GRIB file
This is not a GRIB2 file
Section Number 0 not implemented
Section Number 111 not implemented
java.lang.NullPointerException
	at com.ph.grib2tools.grib2file.RandomAccessGribFile.importFromStream(RandomAccessGribFile.java:42)
	at com.ph.grib2tools.test.GRIB2FileTest.main(GRIB2FileTest.java:44)

We shall try another tools.

# Now we try this jars:
C:\Projects\949_uprava_Azet-u_pre_Belehrad\Tools\Grib_reading\ucar_grib_tool\
jcip-annotations-1.0.jar
grib-8.0.29.jar
unidataCommon-4.2.20.jar
slf4j-api-1.6.1.jar

Created Java project using Java jdk1.8.0_172.
Seems like importing and compatibility with Java 1.8 was satisfied.
But the procedure and RandomAccessFile could not be processed correctly:
---
Reading file: c:\Projects\949_uprava_Azet-u_pre_Belehrad\dataSamples_Belehrad\Azet_Belehrad_comparision\WRF_Belehrad_sample\grib2_source\wrfout_d03_2021-12-23_12.grib
33413392
GRID data
-62169379200000
Tue Dec 09 01:00:00 CET 2
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
0
java.lang.ArrayIndexOutOfBoundsException: 12
	at ucar.grib.grib2.Grib2GDSVariables.getInt(Grib2GDSVariables.java:1741)
	at ucar.grib.grib2.Grib2GDSVariables.<init>(Grib2GDSVariables.java:82)
	at ucar.grib.grib2.Grib2GridDefinitionSection.<init>(Grib2GridDefinitionSection.java:418)

And using call of:
ucar.grib.grib2.Grib2GetData
have given me this error:
---
Exception in thread "main" java.lang.ArithmeticException: / by zero
	at ucar.grib.grib2.Grib2GDSVariables.get80La1(Grib2GDSVariables.java:647)
	at ucar.grib.grib2.Grib2GDSVariables.<init>(Grib2GDSVariables.java:87)
	at ucar.grib.grib2.Grib2GridDefinitionSection.<init>(Grib2GridDefinitionSection.java:418)
	at ucar.grib.grib2.Grib2Data.getData(Grib2Data.java:80)
	at ucar.grib.grib2.Grib2GetData.main(Grib2GetData.java:147)

---
The result is simillar like for the version stored in Jlib.


# Verification of integrated jar file:
netcdfAll-5.5.1.jar has the same issues and behavior.
unidata_netCDF4All/src/unidata_netCDF4All/TestGrib2Reading.java
---
Reading file: c:\Projects\949_uprava_Azet-u_pre_Belehrad\dataSamples_Belehrad\Azet_Belehrad_comparision\WRF_Belehrad_sample\grib2_source\wrfout_d03_2021-12-23_12.grib
c:\Projects\949_uprava_Azet-u_pre_Belehrad\dataSamples_Belehrad\Azet_Belehrad_comparision\WRF_Belehrad_sample\grib2_source\wrfout_d03_2021-12-23_12.grib
8092
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
java.lang.IllegalArgumentException: Not a GRIB-2 Identification section
	at ucar.nc2.grib.grib2.Grib2SectionIdentification.<init>(Grib2SectionIdentification.java:47)
	at unidata_netCDF4All.TestGrib2Reading.main(TestGrib2Reading.java:39)

---

Found one more procedure described here:
https://docs.unidata.ucar.edu/netcdf-java/current/userguide/grib_files_cdm.html
and there Single Data File Mode.
And this was successfully open and read by the test procedure:
https://docs.unidata.ucar.edu/netcdf-java/current/userguide/reading_cdm.html

We will need to investigaete whether we have also some
possibility to directly retrieve data by reading
Lat/Lon coordinates - in the netCDF library.
We should browse yet the functionality.

Test of reading using OpenJDK java 11.
In the new separate workspace tested:
---
Java version: 11.0.7
Reading file: c:\Projects\949_uprava_Azet-u_pre_Belehrad\dataSamples_Belehrad\Azet_Belehrad_comparision\WRF_Belehrad_sample\grib2_source\wrfout_d03_2021-12-23_12.grib
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
---
So it seems working with both versions of Java


# We try the newer software from GitHub:
https://github.com/Unidata/netcdf-java/tree/5.5.1

Cloned and checkout branch 5.5.1 exactly corresponding to
the jar file donwloaded from Unidata portal.

Successfully build with Java 11 version, default one for our installation.
./gradlew assemble

Exectuing also unit tests
./gradlew test
Many tests were excuted but interactive tests on locally running
tomcat have failed.

Have created Eclipse project and exectuted several unit tets.
The project is very big with too many dependencies.

# 241.2022 - after fixing of grib1 conversion, returned to
work on the MeteogramWRFAgent.

The new configuration established for 949 Belgrade machine:
/opt/ims/cfg/station/forecast/MeteogramWRFAgentCfg.xml
---
<x xclass="com.microstepmis.forecast.customization.MeteogramWRFAgent$Config"
        logLevel="3"
        scanInterval="60000"
        waitTime="3600000"
        wrfGribFileMask="WRFPRS_d03.%02d"
        forecastSource="WRF"
        mailRoutingFolder="MAIL"
        customerIdentifier="AZET"
        deleteWRFGribFiles="false"
        readPrecipitationIndicators="false"
        performCoreStationProcessing="false"
        performMOSCorrection="true"
        enableManualCorrection="false"
        enableWRFOnly="true"
        useAlsoWorldStations="true"
        localLocationsPath="../../ims/cfg/station/forecast/WRF_LocalLocations.xml"
        worldLocalLocationsPath="../../ims/cfg/station/forecast/WorldLocalLocations.xml"
        pathToWRFGetForecastCfg="../../ims/cfg/station/forecast/WRF_getForecastCfg.xml"
        pathToWRFCoreStationProcessorCfg="../../ims/cfg/station/forecast/coreStationsProcessorWRF.xml"
        precipitationIndicatorDataDir="../../ims/data/precIndicators/WRF"
        precipitationIndicatorFileMask="wrf_%02d"
        >
<!-- scanInterval="480000" -->
        <runsConfig xclass="com.microstepmis.forecast.customization.MeteogramWRFAgent$RUNsConfig" dataValidityHours="8.0">
            <runs>
                <x run="0" startDayHourMinute="08:00" endDayHourMinute="14:00" usePreviousDay="false" />
                <x run="6" startDayHourMinute="14:00" endDayHourMinute="20:00" usePreviousDay="false" />
                <x run="12" startDayHourMinute="20:00" endDayHourMinute="02:00" usePreviousDay="false" />
                <x run="18" startDayHourMinute="02:00" endDayHourMinute="08:00" usePreviousDay="true" />
            </runs>
        </runsConfig>
</x>
A many TODO items recorded - in progress.
We should start to send emails as well - and verify them.
(Enough is routing to propar folder).


# 1.2.2022 - detected issue with Zombie station records
Example from GFS data hashMap, mirrored also to WRF data hash map:
	<key xclass="Integer">89</key>
	     <value xclass="java.util.HashMap">
	     	<x>
			<key xclass="String">77</key>
			<value xclass="java.util.HashMap">
		</x>
		<x>
			<key xclass="String">78</key>
			<value xclass="java.util.HashMap">
		</x>
		<x>
			<key xclass="String">1102</key>
			<value xclass="java.util.HashMap">
		<x>
			<key xclass="String">1101</key>
			<value xclass="java.util.HashMap">
		</x>
		<x>
			<key xclass="String">10000</key>
			<value xclass="java.util.HashMap">
		</x>
		<x>
			<key xclass="String">50</key>
			<value xclass="java.util.HashMap">
		</x>
		<x>
			<key xclass="String">21</key>
			<value xclass="java.util.HashMap">
		<x>
		
Visible nicely on MeteogramAgent log:
2022-01-28 14:51:06.373 UTC: DEBUG (1) NOTE: Load local locations and stations from: ../../ims/cfg/station/forecast/WRF_LocalLocations.xml
2022-01-28 14:52:16.364 UTC: NOTE: Read WRF as primary data from space, with number of stations: 9
2022-01-28 14:52:16.364 UTC: NOTE: Read GFS and WRF forecast data, with number of stations: 9
2022-01-28 14:52:16.364 UTC: NOTE: Read GFS and WRF forecast data, with number of stations: 9
2022-01-28 14:52:16.368 UTC: DEBUG (3) NOTE: Written into space: METEO/F/dataHourly of size 9
2022-01-28 20:00:10.333 UTC: NOTE: Read WRF as primary data from space, with number of stations: 9
2022-01-28 20:00:10.333 UTC: NOTE: Read GFS as secondary data from space, with number of stations: 77
2022-01-28 20:00:10.342 UTC: NOTE: Read GFS and WRF forecast data, with number of stations: 77
2022-01-28 20:00:10.349 UTC: NOTE: Read GFS and WRF forecast data, with number of stations: 77
2022-01-28 20:00:10.353 UTC: DEBUG (3) NOTE: Written into space: METEO/F/dataHourly of size 77


Fix was based just in protection of adding derived variables to:
ActualDataAgent
	->getActualValForVariable()
	->getCountingActualValues()
	

ReCalculationAgent
	->loadPrecIndicators()
	->integratePrecIndicators()
	->interpolate12hStep()
	->interpolate12hStep()
	->correctCumulusPrecWRF()
	->countWindUAndVComponent()
	->countApparentTemperature()

Investigation showed that the issue is probably fixed, but there is
strange suspicious log, seems like in certain period the GFS/WRF data
are not anymore starProcessHourActualise() in the ActualData agent.

949_Belehrad-IMS-ims:~ # grep "stations\|size" /opt/ims/log/2022/02/01/MeteogramAgent.log
2022-02-01 02:01:00.632 UTC: NOTE: Read WRF as primary data from space, with number of stations: 9
2022-02-01 02:01:00.632 UTC: NOTE: Read GFS as secondary data from space, with number of stations: 9
2022-02-01 02:01:00.636 UTC: NOTE: Read GFS and WRF forecast data, with number of stations: 9
2022-02-01 02:01:00.643 UTC: NOTE: Read GFS and WRF forecast data, with number of stations: 9
2022-02-01 02:01:00.647 UTC: DEBUG (3) NOTE: Written into space: METEO/F/dataHourly of size 9
2022-02-01 08:01:00.686 UTC: NOTE: Read WRF as primary data from space, with number of stations: 9
2022-02-01 08:01:00.686 UTC: NOTE: Read GFS as secondary data from space, with number of stations: 9
2022-02-01 08:01:00.690 UTC: NOTE: Read GFS and WRF forecast data, with number of stations: 9
2022-02-01 08:01:00.698 UTC: NOTE: Read GFS and WRF forecast data, with number of stations: 9
2022-02-01 08:01:00.702 UTC: DEBUG (3) NOTE: Written into space: METEO/F/dataHourly of size 9
2022-02-01 09:34:55.348 UTC: DEBUG (1) NOTE: Load local locations and stations from: ../../ims/cfg/station/forecast/WRF_LocalLocations.xml
2022-02-01 09:36:06.203 UTC: NOTE: Read WRF as primary data from space, with number of stations: 9
2022-02-01 09:36:06.203 UTC: NOTE: Read GFS and WRF forecast data, with number of stations: 9
2022-02-01 09:36:06.203 UTC: NOTE: Read GFS and WRF forecast data, with number of stations: 9
2022-02-01 09:36:06.207 UTC: DEBUG (3) NOTE: Written into space: METEO/F/dataHourly of size 9

See the log:
c:\Projects\949_uprava_Azet-u_pre_Belehrad\Testing\Retrieval_ActualData_agent_GFS_off_1.2.2022.txt
We try also GFS on to execute whole processing
but without reaching the GFS data.
And then also having GFS available as backup.

Memomory check on 1.2.2022 over night - GFS on, MOS off in MeteogramAgent.
Does not look good - steady growth. Snapshots stored here:
/c/Projects/949_uprava_Azet-u_pre_Belehrad/Testing/ForecastModule_memory_usage_1.2.2022.log
/c/Projects/949_uprava_Azet-u_pre_Belehrad/Testing/ForecastModule_memory_usage_1.2.2022_java.log

Memory check from 2 - 7.2.2022,
GFS reading enabled (but not implemented yet),
MOS correction disabled for GFS, WRF reading enabled,
MOS correction for WRF enabled.
Whole Virtual Machine was down, probably memory was exhausted
and machine has terminated without any message in OS messages.
# Samples from scheduler within three days
2022-02-02 12:34:00.001 UTC: NOTE: Heap: free 137469 kb, total 1000888 kb, max 6257408 kb.
2022-02-02 12:35:00.006 UTC: NOTE: Heap: free 374052 kb, total 1017936 kb, max 6257408 kb.
2022-02-02 12:36:00.001 UTC: NOTE: Heap: free 102209 kb, total 1019136 kb, max 6257408 kb.
...

2022-02-02 23:55:00.000 UTC: NOTE: Heap: free 745597 kb, total 1589900 kb, max 6257408 kb.
2022-02-02 23:56:00.000 UTC: NOTE: Heap: free 687635 kb, total 1589900 kb, max 6257408 kb.
2022-02-02 23:57:00.000 UTC: NOTE: Heap: free 572022 kb, total 1589900 kb, max 6257408 kb.
2022-02-02 23:58:00.000 UTC: NOTE: Heap: free 677113 kb, total 1589900 kb, max 6257408 kb.
2022-02-02 23:59:00.001 UTC: NOTE: Heap: free 533694 kb, total 1589900 kb, max 6257408 kb.
...
2022-02-03 00:00:00.000 UTC: NOTE: Heap: free 644999 kb, total 1589900 kb, max 6257408 kb.
2022-02-03 00:01:00.000 UTC: NOTE: Heap: free 483305 kb, total 1589900 kb, max 6257408 kb.
2022-02-03 00:02:00.000 UTC: NOTE: Heap: free 707141 kb, total 1589900 kb, max 6257408 kb.
2022-02-03 00:03:00.004 UTC: NOTE: Heap: free 786081 kb, total 1589900 kb, max 6257408 kb.

2022-02-03 23:53:00.006 UTC: NOTE: Heap: free 969509 kb, total 3688560 kb, max 6257408 kb.
2022-02-03 23:54:00.002 UTC: NOTE: Heap: free 658735 kb, total 3688560 kb, max 6257408 kb.
2022-02-03 23:55:00.003 UTC: NOTE: Heap: free 3092489 kb, total 3688560 kb, max 6257408 kb.
2022-02-03 23:56:00.000 UTC: NOTE: Heap: free 2753271 kb, total 3688560 kb, max 6257408 kb.
2022-02-03 23:57:00.002 UTC: NOTE: Heap: free 2613764 kb, total 3688560 kb, max 6257408 kb.
2022-02-03 23:58:00.001 UTC: NOTE: Heap: free 2728649 kb, total 3688560 kb, max 6257408 kb.
2022-02-03 23:59:00.000 UTC: NOTE: Heap: free 2592588 kb, total 3688560 kb, max 6257408 kb.

2022-02-04 00:00:00.003 UTC: NOTE: Heap: free 2691398 kb, total 3688560 kb, max 6257408 kb.


2022-02-04 15:15:00.009 UTC: NOTE: Heap: free 1062032 kb, total 4271264 kb, max 6257408 kb.


From ForecastModule_memory_usage_2-7.2.2022_java.log
---
  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
17897 root      20   0 9997.5m   1.5g  25464 S 211.3  9.8 289:34.65 java
17897 root      20   0 9997.5m   1.5g  25464 S 212.1  9.8 291:42.06 java
17897 root      20   0 9997.5m   1.5g  25464 S 214.1  9.8 293:50.65 java
17897 root      20   0 9997.5m   1.5g  25464 S  96.2  9.8 294:48.37 java
17897 root      20   0 9997.5m   1.5g  25464 S   4.7  9.8 294:51.17 java
17897 root      20   0 9997.5m   1.5g  25464 S   4.5  9.8 294:53.86 java
17897 root      20   0 9997.5m   1.5g  25464 S   4.5  9.8 294:56.54 java
17897 root      20   0 9997.5m   1.5g  25464 S  94.8  9.8 295:53.47 java
17897 root      20   0 9997.5m   1.5g  25464 S 210.6  9.8 297:59.86 java
17897 root      20   0 9997.5m   1.5g  25464 S  42.7  9.8 298:25.52 java
17897 root      20   0 9997.5m   1.5g  25464 S   4.8  9.8 298:28.40 java
17897 root      20   0 9997.5m   1.5g  25464 S   4.3  9.8 298:30.96 java
...

17897 root      20   0 9997.7m   1.9g  25444 S 213.6 12.2   1102:33 java
17897 root      20   0 9997.7m   1.9g  25444 S 209.4 12.2   1104:39 java
17897 root      20   0 9997.7m   1.9g  25444 S 202.7 12.2   1106:40 java
17897 root      20   0 9997.7m   1.9g  25408 S 173.0 12.2   1108:24 java
17897 root      20   0 9997.7m   1.9g  25408 S 209.6 12.2   1110:30 java
17897 root      20   0 9997.7m   1.9g  25408 S 210.2 12.2   1112:36 java
17897 root      20   0 9997.7m   1.9g  25408 S 214.2 12.2   1114:45 java
17897 root      20   0 9997.7m   1.9g  25408 S 213.3 12.2   1116:53 java
17897 root      20   0 9997.7m   1.9g  25408 S 210.7 12.2   1119:00 java
17897 root      20   0 9997.7m   1.9g  25408 S 213.5 12.2   1121:08 java
...
17897 root      20   0 9999.1m   2.5g  22820 S 183.0 16.0   1717:54 java
17897 root      20   0 9999.1m   2.5g  22820 S  41.1 16.0   1718:19 java
17897 root      20   0 9999.1m   2.5g  22820 S  32.4 16.0   1718:39 java
17897 root      20   0 9999.1m   2.5g  22820 S   3.7 16.0   1718:41 java
17897 root      20   0 9999.1m   2.5g  22820 S   3.9 16.0   1718:43 java
17897 root      20   0 9999.1m   2.5g  22820 S   3.8 16.0   1718:45 java
17897 root      20   0 9999.1m   2.5g  22820 S  40.4 16.0   1719:10 java
17897 root      20   0 9999.1m   2.5g  22820 S 207.9 16.0   1721:15 java
17897 root      20   0 9999.1m   2.5g  22820 S  88.8 16.0   1722:08 java
17897 root      20   0 9999.1m   2.5g  22820 S   4.2 16.0   1722:10 java
17897 root      20   0 9999.1m   2.5g  22820 S   4.1 16.0   1722:13 java
17897 root      20   0 9999.1m   2.5g  22820 S  22.9 16.0   1722:27 java
17897 root      20   0 9999.1m   2.5g  22820 S 208.3 16.0   1724:32 java
...
17897 root      20   0 9999.1m   4.5g   8664 S 216.3 29.2   5330:00 java
17897 root      20   0 9999.1m   4.5g   8664 S 212.2 29.2   5332:08 java
17897 root      20   0 9999.1m   4.5g   8664 S 209.8 29.2   5334:14 java
17897 root      20   0 9999.1m   4.5g   8664 S 211.9 29.2   5336:21 java
17897 root      20   0 9999.1m   4.5g   8664 S 211.0 29.2   5338:28 java
17897 root      20   0 9999.1m   4.5g   8664 S 209.0 29.2   5340:33 java
17897 root      20   0 9999.1m   4.5g   8664 S 212.2 29.2   5342:41 java
17897 root      20   0 9999.1m   4.5g   8664 S 212.0 29.2   5344:48 java
17897 root      20   0 9999.1m   4.5g   8664 S 212.9 29.2   5346:56 java
17897 root      20   0 9999.1m   4.5g   8664 S 213.6 29.2   5349:04 java
17897 root      20   0 9999.1m   4.5g   8664 S 201.2 29.2   5351:05 java
17897 root      20   0 9999.1m   4.5g   8664 S 212.0 29.2   5353:12 java
17897 root      20   0 9999.1m   4.5g   8664 S 211.0 29.2   5355:19 java
17897 root      20   0 9999.1m   4.5g   8664 S 212.8 29.2   5357:27 java
...

Detail diagnostics implemented for essentiual data maps.
--
CurrentDataReaderAgent:
-----------------------
2022-02-04 15:15:40.162 UTC: NOTE: Status of current data reading:
2022-02-04 15:15:40.162 UTC: NOTE: Source: S, configured stations: 105, present: 0, missing: 105
2022-02-04 15:15:40.162 UTC: NOTE: Source: M, configured stations: 36, present: 28, missing: 8
2022-02-04 15:15:40.162 UTC: NOTE: Source: C, configured stations: 105, present: 5, missing: 100
2022-02-04 15:15:40.162 UTC: NOTE: Configured stations: 246, accumulated present of all sources: 33
2022-02-04 15:15:40.162 UTC: DEBUG (3) NOTE: cfg.printDiagnosticsStationsVars on, priting details of retrieved data:.
2022-02-04 15:15:40.162 UTC: DEBUG (3) NOTE:   Stations of source: C
2022-02-04 15:15:40.162 UTC: DEBUG (3) NOTE:   Stations[numberOfVars]:  00001[10], 00002[10], 00003[10], 00004[10], 00005[10],
2022-02-04 15:15:40.162 UTC: DEBUG (3) NOTE:   Number of time slots of the first station/variable: 1
2022-02-04 15:15:40.162 UTC: DEBUG (3) NOTE: cfg.printDiagnosticsStationsVars on, priting details of retrieved data:.
2022-02-04 15:15:40.162 UTC: DEBUG (3) NOTE:   Stations of source: M
2022-02-04 15:15:40.162 UTC: DEBUG (3) NOTE:   Stations[numberOfVars]:  LBBG[8], LBPD[7], LBSF[8], LBWN[8], LDDU[8], LDOS[8], LDPL[9], LDRI[10], LDZA[8], LDZD[9], LHBP[8], LHDC[8], LHPP[8], LQBK[8], LQMO[7], LQSA[7], LQTZ[7], LRCL[8], LRCV[8], LRIA[8], LROP[8], LRTR[8], LWSK[8], LYBE[8], LYNI[8], LYPG[8], LYTV[7], LYVR[8],
2022-02-04 15:15:40.162 UTC: DEBUG (3) NOTE:   Number of time slots of the first station/variable: 2
2022-02-04 15:15:40.162 UTC: NOTE: Successfully finished.

ActualData agent:
-----------------
2022-02-04 15:15:07.321 UTC: DEBUG (3) NOTE: Call of actualiseDataFromSelect
2022-02-04 15:15:07.321 UTC: DEBUG (3) WARNING: Forectime GFS start is null - setting forecast start time to current hour.
2022-02-04 15:15:07.364 UTC: DEBUG (3) NOTE: hourValues map, stations: 9
2022-02-04 15:15:07.364 UTC: DEBUG (3) NOTE: actualDataValues map, stations: 28
2022-02-04 15:15:07.365 UTC: DEBUG (3) NOTE: cfg.printDiagnosticsStationsVars on, printing details of actualDataValues.
2022-02-04 15:15:07.365 UTC: DEBUG (3) NOTE:   Stations[numberOfVars]:  89[10], 92[8], 93[8], 94[8], 110[10], 113[8], 116[10], 117[10], 236[10], 238[8], 376[10], 381[10], 383[11], 385[11], 391[11], 394[10], 397[10], 400[10], 403[10], 536[10], 538[10], 540[10], 542[10], 547[10], 548[10], 550[10], 1045[10], 5005[10],
2022-02-04 15:15:07.365 UTC: DEBUG (3) NOTE:   Number of time slots of the first station/variable: 1
2022-02-04 15:15:07.365 UTC: DEBUG (3) NOTE: Rewritting in space also hourValues in block: METEO/F/dataHourly

MeteogramWRFAgent:
------------------
2022-02-04 15:15:05.294 UTC: NOTE:  --- Start process starCreate WRF Meteogram ---
2022-02-04 15:15:05.294 UTC: DEBUG (3) NOTE: cfg.printDiagnosticsStationsVars on, printing details of gribValues.
2022-02-04 15:15:05.294 UTC: DEBUG (3) NOTE:   gribValues - stations[numberOfVars]:  548[31], 549[31], 5004[31], 5009[31], 6001[31], 6002[31], 6003[31], 6004[31], 6005[31],
2022-02-04 15:15:05.294 UTC: DEBUG (3) NOTE:   gribValues - number of time slots of the first station/variable: 49
2022-02-04 15:15:05.294 UTC: DEBUG (3) NOTE: cfg.printDiagnosticsStationsVars on, printing details of correctMOSgribValues.
2022-02-04 15:15:05.294 UTC: DEBUG (3) NOTE:   correctMOSgribValues - stations[numberOfVars]:  548[34], 549[34], 5004[34], 5009[34], 6001[34], 6002[34], 6003[34], 6004[34], 6005[34],
2022-02-04 15:15:05.294 UTC: DEBUG (3) NOTE:   correctMOSgribValues - number of time slots of the first station/variable: 49

MeteogramAgent:
---------------
2022-02-04 15:13:02.472 UTC: NOTE: --- Start process starCreateMeteogram ---
2022-02-04 15:13:02.472 UTC: DEBUG (3) NOTE: cfg.printDiagnosticsStationsVars on, printing details of correctMOSgribValues.
2022-02-04 15:13:02.473 UTC: DEBUG (3) NOTE:   correctMOSgribValues - stations[numberOfVars]:  548[34], 549[34], 5004[34], 5009[34], 6001[34], 6002[34], 6003[34], 6004[34], 6005[34],
2022-02-04 15:13:02.473 UTC: DEBUG (3) NOTE:   correctMOSgribValues - number of time slots of the first station/variable: 49

# 8.2.2022 - details of collected memory usage in the agents
1703524
1703524
1703524
1703532
1795072 - at 8:22 UTC
1793840 - at 8:28 UTC
1841232 - at 8:36 
1841468 - 8:37
1841468 - 8:38
1841468 - 8:39
1841528 - 8:41
1841528 - 8:42
1841528 - 8:43
1842164 - 8:44
# test with bunch processing of SYNOP messaghes - a lot
1835780 - 8:45
1835780 - 8:46
1835780 - 8:47
1835780 - 8:48
1836120 - 8:49
1836120 - 8:50
1836132 - 8:57
1836132 - 8:59
1836132 - 9:01
1836132 - 9:03
1836236 - 9:15
- no increase, even decrease in memory consumption
-> means that CurrentDataReaderAget is not a culprit

1895332 - 9:35
1895700 - 10:16
1984440 - 13:57

Investigation of size of the object options.  One of the options is to
use instrumentation package= part of Java standard edition, but
requires extension of environment of the instrumentation agent.
https://www.baeldung.com/java-size-of-object

Other option is to use OpndJDK JOL pakcage.
This dependency is missing in our environment.
Described here:
https://www.baeldung.com/jvm-measuring-object-sizes

We have decided finally to use VisualVM sampler and thread dumps
investigation and investigation of static shared hashmaps
using measuring X2O outputs.

Using VisualVM investigations,
collectede snaphosts from the Sampler.
And memory head.
Very high memory consumption is in the FileInsertTerminal,
but it seems the memory is also reclaimed correctly.
Because we have conducted already stand-alone test of
the CurrentDataReaderAgent.
Very likelly the issue is in ingestion of WRF genuine data source
into the Module and its parametrization.

Records of using VisualVM.

Using Eclipse - Memory Analyzer.
Production of the 'Leak suspect report', which identified
again the FileInsertTerminals.
I have analyzed the main hash maps in continuous
running system, but the differences in the retain size
are subtle.
Retain size is the size of the objects after running
the garbage collector.
But still the FileInsertTerminals grow.
Captured screens and figures, all corresponds to limited installation
of four agents:
 Top_memory_consumers_8.2.2022_15.54_afterWRFreading.png
  - showing that the FileInsertTerminal is the biggest memory
  consumer in whole system. Together it occupies
  more than 95% of the memory.
 4agents_HeapDump_LeakSuspectReport_EclipseMemoryAnalyzer_9.2.2022_14.09.png
  - Eclipse Memory Analyzer shows that there is suspicious
  component in the FileInsertTerminal.
 4agents_HeapDump_CurrentDataReaderAgent_diff_9.2.2022-11.00_14.09.png
 4agents_HeapDump_ActualDataReaderAgent_diff_9.2.2022-11.00_14.09.png
 4agents_HeapDump_MeteogramWRFAgent_diff_9.2.2022-11.00_14.09.png
 4agents_HeapDump_MeteogramAgent_diff_9.2.2022-11.00_14.09.png
  - Deeper investigation of the retain size of static shared HashMaps
    containing data in the four agents under investigation shows that
    there are really just subtle differences between two snasphosts
    captured on continuosly running system with circa same data
    processed and retained in the memory.
    CurrentDataReaderAgent.currentData (ConurrentHashMap)
      625 296 bytes -> 682 394 bytes
    ActualDataAgent.actualDataValues (HashMap)
      285 668 bytes -> 299 346 bytes
    ActualDataAgent.modifiedValues (Synchronized Map)
      1 513 418 bytes -> 1 513 274 bytes
    MeteogramWRFAgent.correctMOSgribValues (Synchronized Map)
      1 513 418 bytes -> 1 513 274 bytes (seems like pointer to ActualDataAgent modifiedValues!)
    MeteogramWRFAgent.gribValues (HashMap)
      684 bytes -> 684 bytes
    MeteogramAgent.correctMOSgribValues (Synchronized Map)
      1 513 418 bytes -> 1 513 274 bytes (seems like pointer to ActualDataAgent modifiedValues - the same pointer!)
    MeteogramWRFAgent.gribValues (object)
      null -> null

   4agents_HeapDump_LeakSuspect_FileInsertTerminal_inserterVector.png
   4agents_HeapDump_LeakSuspect_FileInsertTerminal_inserterVector_decoder9.2.2022-11.00.png
   4agents_HeapDump_LeakSuspect_FileInsertTerminal_inserterVector_decoder9.2.2022-14.09.png
    - FileInsertTerminal.inserterVector raised the retained size significantly.
      49 197 826 bytes -> 52 752 670 bytes
      Just this one collection object holds ~50 times more data than
      the agents which read WRF grib files.
      And withing one hour the size increased by ~3 MegaBytes.
     - Investigation which inner object has changed the size showed that the culprit
      is inserterVector[i].decoder which did not release the allocated memory.
      650 185 bytes -> 3 171 333 bytes
      But no inner object of the decoder was increased.
      Seems like deallocation of the 'jep' instance might be the issue?

Conducted one more integration test with turning off all
ForecastModule agents, having flow of just current data through
terminals and inserters.
Achieved by disabling all agents in the cfg/station/cfg/progs.xml
leaving just the CurrentDataReaderAgent running, and even this one was
disbled by its configuraition.

Investigation of PhysicalMemory size of the IMS4 java system process:
RSS    UTC time
1593320 16:00
1613396 17:00
1614476 18:00
1628080 19:00
1651264 20:00
1652772 21:00
1663156 22:00
1663980 23:00
1672124 00:00
1679888 01:00
...
1701312 05:00
...
1720448 08:00
...
1735004 09:37


Investigation of HeapDumps of this process
Feb  9 17:26 heapdump-9.2.2022-17.26.hprof
Feb 10 08:38 heapdump-10.2.2022-08.38.hprof

The difference are much more subtle in this case and in several places
of the inserterVector.
Communication_only_FileInsertTerminals_9.2-10.2.2022_volatile_totalBytesTotalInstances_increase.png
 - Size of the biggest objects did not increase so significantly this time over
 the night. Two morning snapshots 8:38 and 10:28 shows even drop in size.
 Retained Size of the biggest object FileInsertTerminal#4 was this:
   52 779 818 bytes
   52 802 106 bytes
   52 781 176 bytes
 But, we see in the summary statistics:
   Total bytes   Total Classes   Total Instances
   559 455 259   11 379          8 134 307
   569 895 304   11 349          8 334 790
   587 122 858   11 330          8 583 305
 We see steady increase in total bytes allocated - which
 corresponds to memory leak and stady increase of RRS on system level.
 And we see steady increase of class instances.
 

10.2.2022 10:51 turned off all FileInsertTerminals.
So from communicaiton left just
ingesiton of Metar and Synop into the MessageDatabase.
RSS     UTC time
1734708 09:52
...
1404212 11:16
...
1418016 12:21
...
1418084 13:01

Memory does not increase anymore and after running of Garbace
Collector, the RSS allocation has dropped.
Also monitoring shows there are no new orphan object instances.
This points that very likelly problematic are
the file insert terminals.
This issue was not detected in autumn, so we check
what has changed in dependent components.
com.microstepmis.communication2.modules.FileInsertTerminal
 - changed last 3 years ago
com.microstepmis.communication2.modules
 - development on IWXXM and Ices terminal
com.microstepmis.envidb.insert.AbstractInserter
com.microstepmis.envidb.insert.Inserter
com.microstepmis.envidb.insert.InserterResult
 - no change in last 4-5 months.
   In the package it self changed several things
   seems like not related.
com.microstepmis.envidb.util.CurrentDataExportAgent
 - no change in last year
No change in Coder and significant change in
envidb/inserters

Over weekend we turn on just METAR insertion and observe the
behavior.



