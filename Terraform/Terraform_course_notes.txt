# Terrafrom training notes
# 6.-8.11.2019 = given by Shamilla

Local installation of Terraform for our development:
1. Terraform
https://www.terraform.io/downloads.html
 unpack and open cmd:
 C:\Users\ctbto-guest\terraform>terraform.exe --version
 Terraform v0.12.13

Very nice documentaiton:
https://www.terraform.io/docs/

2. InteliIDEA
https://www.jetbrains.com/idea/download/download-thanks.html?platform=windows

3. AWS CLI - msi installer did not suppoort local installation
https://docs.amazonaws.cn/en_us/cli/latest/userguide/install-windows.html#install-msi-on-windows
(It is possible to install python first and then attempt to msi again as local user.)
Final it was installed by sysadmin.
Verification is to open the terminal in IDEA and run this command:
> aws
  we should get:
---
 C:\Users\ctbto-guest\terrafrom_course>aws
 usage: aws [options] <command> <subcommand> [<subcommand> ...] [parameters]
 To see help text, you can run:

   aws help
   aws <command> help
   aws <command> <subcommand> help
---

# Creating the project
Run IDEA and add new plugin - particularly |HashiCorp Terraform 
which supports HashiCorp Terraform Language

# We are recommended to create our own personal account on Amazon AWS (credit card is required)
Free trier account - requers the credit card.
12 month free.

# Configuration of IDEA project to connect to the Amazon cloud
C:\Users\ctbto-guest\terrafrom_course>aws configure
AWS Access Key ID [None]: XXX
AWS Secret Access Key [None]: XXX
Default region name [None]: eu-central-1
Default output format [None]: xml

This will create the config file:
C:\Users\ctbto-guest\.aws
 config
 credentials

I was missing terraform.exe in my path so it had to be added to the path:
C:\Users\ctbto-guest\AppData\Local\Microsoft\WindowsApps
These are the commands executed in the terminal:
 aws s3 ls
 set path
 copy ..\terraform.exe \users\ctbto-guest\AppData\Local\Microsoft\WindowsApps\.
 terraform.exe init
 cd lab1
 terraform.exe plan - this 
 # actual deployment is done via
 terraform.exe apply

Documentation about AWS provider details can be found here:
https://www.terraform.io/docs/providers/aws/index.html

Terraform supports variety of providers:
https://www.terraform.io/docs/providers/index.html
 
# After launching of 'terraform plan' we can see created services on our 'ctbto-test' account here:
https://s3.console.aws.amazon.com/s3/home?region=us-east-2#

# Terraform destroy:
> terraform destroy


Nothing actually worked because of the permission problem:
---
Error: Error launching source instance: AuthFailure: AWS was not able to validate the provided access credentials
        status code: 401, request id: d44fbb79-1850-4bde-a06a-00359178a805

  on main.tf line 25, in resource "aws_instance" "helloWorld":
  25: resource "aws_instance" "helloWorld" {
---
This permission problem probably related to malfunctial local
installation of Terraform, when I moved to Raluca's computer I could
create aws_instance.

# Thursday - Buckets
aws_s3_bucket - we can consider it as a folder and in folder we can
have many other files.

.terraform.tfstate - autogenerated - each user can have different state on his local 
                                     version.

lab2> terraform apply
- for the bucket resource it works
(there must be some permission issue with my user - not it was issue with my local installation)

I have uploaded a file to my bucket through web interface of AWS.
lab2>terraform destroy
- casted this error:
---
aws_s3_bucket.main: Destroying... [id=terraform-backend-jan]
Error: error deleting S3 Bucket (terraform-backend-jan): BucketNotEmpty: The bucket you tried to delete is not empty
        status code: 409, request id: 3B9E63E4E1CD0AA8, host id: ra3g4lRnowTFQueZQuvegSj0ZON0+yoldbx8xc9RJewhJBbR9gt/wm8gu6RlxjA81T2mUYJiZao=
---

# Variables
Do not repete things - 
Terraform CLI:
https://www.terraform.io/docs/configuration/variables.html
primitive types
then list, set, map, object, tuple
Object can have mixed type properties - there can be also list type in
Then we have environmental variables

referencing inside the terraform code
[aws_security_group.instance.id] - <provider_type>.<name>.<attribute>
this 'id' is replaced by the provider when we run apply.
Terraform does not read line-by-line but craete dependency graph.

There are two sorts:
- Input and Output variables

Output variables are used in the console.
We have to create addtion file "outputs.tf" 
> terraform init
> terraform plan
> terraform apply
- outputs also
---
Apply complete! Resources: 0 added, 0 changed, 0 destroyed.
Outputs:
bucket_id = terraform-backend-jan2
---
Or:
> C:\Users\ctbto-guest\terrafrom_course\lab3>terraform output
bucket_id = terraform-backend-jan2

# Data sources (difference bewteen data sources and resource - data source is only read)
data "aws_vpc" 
data "aws_subnet_ids" "default" 

# LoadBalancer
I have tested my AWS load balancer using this public web page:
https://loadimpact.com/


# Friday - 8.11.2019
Loops and user accounts creation

array of strings - users: ["user1", "user2"]

# functions:
https://www.terraform.io/docs/configuration/functions.html
Numeric functions, String functions, 
> terraform console
?[J> lower(split(" ", "Jan Kianicka")[0])
jan

# Web site features.
We got the web page from Shamila and we create Bucket and upload the
files there.

After assigning the content of the page - "content-type"
My web page was after while probably registered on a web server,
and now it is available:
https://terraformjanswebsite.s3.eu-central-1.amazonaws.com/index.html

# Terraform cloud - having code and applications on one place
https://www.terraform.io/docs/cloud/index.html

# Testing the terraform
We need Golang
https://golang.org/dl/

We need Dep - devendency management for Go
https://golang.github.io/dep/docs/installation.html
for windows the build version can be found here:
https://go.equinox.io/github.com/golang/dep/cmd/dep

In lab10:
---
> dir 
basic_setup_test.go
> go test
C:\Users\ctbto-guest\jans_terraform_proj\lab10>go test

Go is working

PASS
ok      _/C_/Users/ctbto-guest/jans_terraform_proj/lab10        0.189s
---

For writting terafform test we need yet to install Terratest:
dep.exe ensure -add github.com/gruntwork-io/terratest/modules/terraform@v0.15.9

this unfortunatelly did not work for any path, not even the path which we created - 
C:\Go\src\terraform-tests

Tests are being executed each time when I make changes to the code.
> go test -timeout 10 minutes

# Final Excercise:
Building whole infrastructure:
Building VPC - Amazon Web Service - Virtual Private Cloud
  Amazon VPC enables you to use your own isolated resources within the
  AWS cloud, and then connect those resources directly to your own
  datacenter using industry-standard encrypted IPsec VPN connections.

  When you create a VPC, you must specify a range of IPv4 addresses
  for the VPC in the form of a Classless Inter-Domain Routing (CIDR)
  block; for example, 10.0.0.0/16.  This is the primary CIDR block for
  your VPC. For more information about CIDR notation, see RFC 4632.

The I need amazon Gateway:
  Amazon API Gateway helps developers to create and manage APIs to
  back-end systems running on Amazon EC2, AWS Lambda, or any publicly
  addressable web service.  With Amazon API Gateway, you can generate
  custom client SDKs for your APIs, to connect your back-end systems
  to mobile, web, and server applications or services.

Availibiity zones:
  A VPC spans all the Availability Zones in the region.  After
  creating a VPC, you can add one or more subnets in each Availability
  Zone.  When you create a subnet, you specify the CIDR block for the
  subnet, which is a subset of the VPC CIDR block.  Each subnet must
  reside entirely within one Availability Zone and cannot span zones.
  Availability Zones are distinct locations that are engineered to be
  isolated from failures in other Availability Zones.  By launching
  instances in separate Availability Zones, you can protect your
  applications from the failure of a single location.  We assign a
  unique ID to each subnet.

Some reading about AWS networking and infrastructure seting up:
https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html

Other important resources in AMS:
Ec2:
What Is Amazon EC2?
 Amazon Elastic Compute Cloud (Amazon EC2) provides scalable computing
 capacity in the Amazon Web Services (AWS) cloud.  Using Amazon EC2
 eliminates your need to invest in hardware up front, so you can
 develop and deploy applications faster.  You can use Amazon EC2 to
 launch as many or as few virtual servers as you need, configure
 security and networking, and manage storage.  Amazon EC2 enables you
 to scale up or down to handle changes in requirements or spikes in
 popularity, reducing your need to forecast traffic.

S3:
 Amazon Simple Storage Service (Amazon S3) is storage for the
 Internet.  You can use Amazon S3 to store and retrieve any amount of
 data at any time, from anywhere on the web. You can accomplish these
 tasks using the AWS Management Console, which is a simple and
 intuitive web interface.  This guide introduces you to Amazon S3 and
 how to use the AWS Management Console to complete the tasks shown in
 the following figure.


