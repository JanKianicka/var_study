# Esentials of Docker and its features
# 3.9.2019 - for CATS and VDMS automatic testing
# https://www.tutorialspoint.com/docker/docker_overview.htm

# Overview
Docker is a container management service. The keywords of Docker are develop, ship and run anywhere.

* Docker for Mac − It allows one to run Docker containers on the Mac OS.
* Docker for Linux − It allows one to run Docker containers on the Linux OS.
* Docker for Windows − It allows one to run Docker containers on the Windows OS.
* Docker Engine − It is used for building Docker images and creating Docker containers.
* Docker Hub − This is the registry which is used to host various Docker images.
* Docker Compose − This is used to define applications using multiple Docker containers.

Official site: https://www.docker.com

Addind 'docker' user on Centos7 VM - CATS local master:
> useradd -m docker
> passwd docker
> usermod -aG wheel docker
> su - docker
> sudo ls -l /root

Docker is only designed to run on Linux kernel version 3.8 and higher
> uname -a
Linux localhost.localdomain 3.10.0-957.el7.x86_64 #1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux

For installation we switched to follow: 
https://www.cyberciti.biz/faq/install-use-setup-docker-on-rhel7-centos7-linux/
As root execute these commands:
> yum install -y http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.95-2.el7_6.noarch.rpm
> yum install docker-ce
   ---
   docker-ce                    x86_64                3:19.03.1-3.el7                docker-ce-stable                 24 M
   Installing for dependencies:
    containerd.io                x86_64                1.2.6-3.3.el7                  docker-ce-stable                 26 M
     docker-ce-cli 
   ---
   Retrieving key from https://download.docker.com/linux/centos/gpg
   Importing GPG key 0x621E9F35:
    Userid     : "Docker Release (CE rpm) <docker@docker.com>"
    Fingerprint: 060a 61c5 1b55 8a7f 742b 77aa c52f eb6b 621e 9f35
> systemctl enable docker.service
> systemctl start docker.service
> systemctl status docker.service
● docker.service - Docker Application Container Engine
   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)
   Active: active (running) since Tue 2019-09-03 16:25:36 CEST; 7s ago
     Docs: https://docs.docker.com

> docker info
  Return Value
  - Number of containers
  - Number of images
  - The storage driver used by Docker
  - The root directory used by Docker
  - The execution driver used by Docker
  /var/lib/docker
   builder
   buildkit
   containers
   image
   network
   overlay2
   plugins
   runtimes
   swarm
   tmp
   trust
   volumes

> docker help

> docker version
Client: Docker Engine - Community
 Version:           19.03.1
 API version:       1.40
 Go version:        go1.12.5
 Git commit:        74b1e89
 Built:             Thu Jul 25 21:21:07 2019
 OS/Arch:           linux/amd64
 Experimental:      false

> docker run hello-world
Downloaded container from  https://hub.docker.com/

> docker run -it ubuntu bash 
root@d133f2651d1f:/#
 There I could execute for example installation of gcc using Ubuntu commands:
 > apt update
 > apt install build-essential
 > which gcc
 > which make

From outside it is possible to see installed resource when one has root priviledges on hosting system:
> ls -l /var/lib/docker/overlay2/
> less /var/lib/docker/overlay2/781f51b42f0449e8e0710b11c2d333b17cc86e010b5439cdf72304bd000527ea/diff/var/log/apt/history.log
> ls /var/lib/docker/overlay2/781f51b42f0449e8e0710b11c2d333b17cc86e010b5439cdf72304bd000527ea/diff/etc

Docker image for Jenkins:
> docker pull jenkins
> docker run -p 8080:8080 -p 50000:50000 jenkins
Because Jenkins is running and occuping already port 8080 we have to map to port 8090:
> docker run -p 8090:8080 -p 50000:50000 jenkins
> docker ps #for listing running containers
--- cat ---
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                              NAMES
0a7133820aaf        jenkins             "/bin/tini -- /usr/l…"   11 minutes ago      Up 11 minutes       0.0.0.0:50000->50000/tcp, 0.0.0.0:8090->8080/tcp   great_curie
--- cat ---
And name to be used to connect to the running container is CONTAINER ID.
> docker exec -it 0a7133820aaf /bin/bash
> docker stop 768b338c366a
The downloaded Jenkins container is very old and most of the pluggins was not possible to install
will requrie uprade.

In Docker, everything is based on Images. An image is a combination of a file system and parameters.
Getting yet Centos image and run corresponding container.
> docker run -it centos /bin/bash
> docker images
 ---
 REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
 centos              latest              67fa590cfc1c        2 weeks ago         202MB
 ubuntu              latest              a2a15febcdf3        3 weeks ago         64.2MB
 hello-world         latest              fce289e99eb9        8 months ago        1.84kB
 jenkins             latest              cd14cecfdb3a        13 months ago       696MB
 ---
> docker images -q #Just IMAGE ID
We remove hello-world. 
> docker rmi fce289e99eb9
We have the following error message:
"Error response from daemon: conflict: unable to delete fce289e99eb9 (must be forced) - image is being used by stopped container 4703d1eddb5d"
> docker ps -a # Lists also stopped containers
> docker rm 4703d1eddb5d # For removing hello_world container
> docker rmi fce289e99eb9 # removed one image

Inspecting details about the image:
> docker inspect centos 
retuns comprehensive JSON output with details.

History of commands in the docker image
> docker history 67fa590cfc1c # IMAGE ID
To see top process
> docker top 060051ebf01d # Container ID

See the performance statistics of running container
> docker stats 060051ebf01d
---
CONTAINER ID        NAME                   CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
060051ebf01d        xenodochial_dubinsky   95.56%              38.19MiB / 4.575GiB   0.82%               656B / 0B           0B / 0B             5
---

> docker attach 060051ebf01d # attaches to running container and terminal there
> docker pause b825cf106c1e # really just pauses the processes 
> docker unpause b825cf106c1e # the processing continues
Kill the container - final state
> docker kill b825cf106c1e

Docker is the new virtualization architecure - we do not need dedicated virtual HW for each 
new application:
"Now comes the new generation which is the Docker engine. 
This is used to run the operating system which earlier used to be virtual machines as Docker containers.
All of the Apps now run as Docker containers."

To start stopped or freshly created containers use this sequence:
> docker ps -a
> docker start CONTAINER_ID
> docker attach CONTAINER_ID

For easy working with containers we need nsenter. Installation is like this:
> docker run --rm -v /usr/local/bin:/target jpetazzo/nsenter
We need to get Pid of the process on hosting system
> docker inspect bc86a73b1b46 |grep Pid

Command > nsenter –m –u –n –p –i –t 2978 /bin/bash - did not work
but this has worker
> nsenter --target 8980 --mount --uts --ipc --net --pid
And
> exit 
Will not destroy the container but just logout.

Dockerfile - sample stored here.
Provided command "sudo docker build –t myimage:0.1 ." did not work.
This command has deployed the new container:
> docker build -f Dockerfile --tag 1.0 . # but did not provide the proper name

When Dockerfile sequence fails, no new image is created and only exited container remains hanging.

> docker build -f Dockerfile -t custom_ubuntu:0.1 .
> docker images
 ---
 REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
 custom_ubuntu       0.1                 fc5386f99eea        8 seconds ago       91.3MB
 ---

Trying to build CATS slave machine implemented by Thomas.
Copied from cats repository. But I have removed some local files to be copied -
- this is already obsolete because we have automated it.
Had to copy ssh keys which are actually mine. We can see there also big 
duplicities of installation procedures. This will required to be different.
For inspiration see:
https://stackoverflow.com/questions/18136389/using-ssh-keys-inside-docker-container
> docker build -t example --build-arg ssh_prv_key="$(cat ~/.ssh/id_rsa)" --build-arg ssh_pub_key="$(cat ~/.ssh/id_rsa.pub)" --squash .

Successfull built of the image.
> sudo docker build -f Dockerfile_cats -t centos_cats:1.0 .
--- cat ---
WARNING: modifying listener
/bin/sh: line 0: cd: /apps/bin/python/bin: No such file or directory



Removing intermediate container 185d3d6b6726
 ---> 295472cac53f
Step 18/24 : USER root
 ---> Running in db3f61c4e74e
Removing intermediate container db3f61c4e74e
 ---> d66734870c11
Step 19/24 : RUN dbus-uuidgen > /var/lib/dbus/machine-id;     ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N ''
 ---> Running in 311482a6b650
Generating public/private rsa key pair.
Your identification has been saved in /etc/ssh/ssh_host_rsa_key.
Your public key has been saved in /etc/ssh/ssh_host_rsa_key.pub.
The key fingerprint is:
67:61:7d:e3:94:02:1a:3d:0d:0d:02:4b:9d:0a:8d:1e root@311482a6b650
The key's randomart image is:
+--[ RSA 2048]----+
|     ooooo+=     |
|    E...o+ooo  . |
|   . o... o.o =  |
|    . .  . . = . |
|        S o   .  |
|         o       |
|                 |
|                 |
|                 |
+-----------------+
Removing intermediate container 311482a6b650
 ---> ba583aff6449
Step 20/24 : WORKDIR "${WORKDIR}"
 ---> Running in 49b6429717ca
Removing intermediate container 49b6429717ca
 ---> 1b78b1d99f40
Step 21/24 : EXPOSE 22
 ---> Running in 03821855e6ef
Removing intermediate container 03821855e6ef
 ---> 10d63df16e13
Step 22/24 : EXPOSE 5910-5920
 ---> Running in 4484c5fface0
Removing intermediate container 4484c5fface0
 ---> 141a602c8815
Step 23/24 : CMD ["/sbin/service", "sshd", "start"]
 ---> Running in a4877be3029b
Removing intermediate container a4877be3029b
 ---> 0312546851a2
Step 24/24 : CMD ["sh", "-c", "tail -f /dev/null"]
 ---> Running in 64c6e80e8185
Removing intermediate container 64c6e80e8185
 ---> 9ef4ad06d562
Successfully built 9ef4ad06d562
Successfully tagged centos_cats:1.0
--- cat ---

However, trying to launch oracle on this machine has the following problem:
 SQL> SQL> ORA-00845: MEMORY_TARGET not supported on this system
 ERROR:
 ORA-01012: not logged on
 Process ID: 0
 Session ID: 0 Serial number: 0
Even if I changed the shared memory size like this:
> sudo docker run --shm-size 0.5G -it 9ef4ad06d562 /bin/bash
So we have two issues with this Docker image. Repository name is not recognized (image id had to be used)
and oracle can not start because of MEMORY_TARGET issue.

Addind more shared memory has cured the issue:
> sudo docker run --shm-size 4G -it 9ef4ad06d562 /bin/bash




